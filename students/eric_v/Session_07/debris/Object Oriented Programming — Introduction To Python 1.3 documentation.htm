<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js flexbox canvas canvastext webgl no-touch geolocation postmessage no-websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients no-cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <title>Object Oriented Programming — Introduction To Python 1.3 documentation</title>
  

  
  

  

  
  
    

  

  
  
    <link rel="stylesheet" href="Object%20Oriented%20Programming%20%E2%80%94%20Introduction%20To%20Python%201.3%20documentation_files/theme.css" type="text/css">
  

  

  
    <link rel="top" title="Introduction To Python 1.3 documentation" href="http://uwpce-pythoncert.github.io/IntroToPython/index.html">
        <link rel="next" title="Session Eight: More OO: Properties, Special methods." href="http://uwpce-pythoncert.github.io/IntroToPython/session08.html">
        <link rel="prev" title="Session Six: Advanced Argument Passing, lambda, functions as objects" href="http://uwpce-pythoncert.github.io/IntroToPython/session06.html"> 

  
  <script src="Object%20Oriented%20Programming%20%E2%80%94%20Introduction%20To%20Python%201.3%20documentation_files/modernizr.js"></script>

<style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>

<body class="wy-body-for-nav" role="document"><div style="display: none;" id="MathJax_Message"></div>

  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side">
      <div class="wy-side-scroll">
        <div class="wy-side-nav-search">
          

          
            <a href="http://uwpce-pythoncert.github.io/IntroToPython/index.html" class="icon icon-home"> Introduction To Python
          

          
          </a>

          
            
            
              <div class="version">
                1.3
              </div>
            
          

          
<div role="search">
  <form id="rtd-search-form" class="wy-form" action="search.html" method="get">
    <input name="q" placeholder="Search docs" type="text">
    <input name="check_keywords" value="yes" type="hidden">
    <input name="area" value="default" type="hidden">
  </form>
</div>

          
        </div>

        <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
          
            
            
                <ul class="current">
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session01.html">Session One: Introductions</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session02.html">Session Two: gitHub, Functions, Booleans and Modules</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session03.html">Session Three: Sequences, Iteration and String Formatting</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session04.html">Session Four: Dictionaries, Sets, and Files</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session05.html">Session Five: Exceptions, Testing, Comprehensions</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session06.html">Session Six: Advanced Argument Passing, lambda, functions as objects</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href=""><span class="toctree-expand"></span>Object Oriented Programming</a><ul>
<li class="toctree-l2"><a class="reference internal" href="#review-questions"><span class="toctree-expand"></span>Review/Questions</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#review-of-previous-class">Review of Previous Class</a></li>
<li class="toctree-l3"><a class="reference internal" href="#homework-review">Homework review</a></li>
<li class="toctree-l3"><a class="reference internal" href="#notes-on-floating-point">Notes on Floating point</a></li>
<li class="toctree-l3"><a class="reference internal" href="#code-review">Code Review</a></li>
<li class="toctree-l3"><a class="reference internal" href="#lightning-talks-today">Lightning Talks Today:</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="#id1"><span class="toctree-expand"></span>Object Oriented Programming</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#id2">Object Oriented Programming</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="#python-classes"><span class="toctree-expand"></span>Python Classes</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#id3">Python Classes</a></li>
<li class="toctree-l3"><a class="reference internal" href="#lab">LAB</a></li>
<li class="toctree-l3"><a class="reference internal" href="#lightning-talks">Lightning Talks</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="#subclassing-inheritance"><span class="toctree-expand"></span>Subclassing/Inheritance</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#inheritance">Inheritance</a></li>
<li class="toctree-l3"><a class="reference internal" href="#subclassing">Subclassing</a></li>
<li class="toctree-l3"><a class="reference internal" href="#overriding-attributes">Overriding attributes</a></li>
<li class="toctree-l3"><a class="reference internal" href="#overriding-methods">Overriding methods</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="#more-on-subclassing"><span class="toctree-expand"></span>More on Subclassing</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#overriding-init">Overriding __init__</a></li>
<li class="toctree-l3"><a class="reference internal" href="#more-subclassing">More subclassing</a></li>
<li class="toctree-l3"><a class="reference internal" href="#when-to-subclass">When to Subclass</a></li>
<li class="toctree-l3"><a class="reference internal" href="#attribute-resolution-order">Attribute resolution order</a></li>
<li class="toctree-l3"><a class="reference internal" href="#what-are-python-classes-really">What are Python classes, really?</a></li>
<li class="toctree-l3"><a class="reference internal" href="#type-based-dispatch">Type-Based dispatch</a></li>
<li class="toctree-l3"><a class="reference internal" href="#wrap-up">Wrap Up</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="#id4">LAB</a></li>
<li class="toctree-l2"><a class="reference internal" href="#id5"><span class="toctree-expand"></span>More on Subclassing</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#what-s-a-subclass-for">What’s a Subclass For?</a></li>
<li class="toctree-l3"><a class="reference internal" href="#multiple-inheritance">Multiple Inheritance</a></li>
<li class="toctree-l3"><a class="reference internal" href="#super"><code class="docutils literal"><span class="pre">super()</span></code></a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="#homework">Homework</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session08.html">Session Eight: More OO: Properties, Special methods.</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session09.html">Session Nine: Iterators, Iterables, and Generators</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/session10.html">Session Ten: Decorators and Context Managers – Wrap Up</a></li>
</ul>
<ul>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/exercises/index.html">Exercises</a></li>
<li class="toctree-l1"><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/supplements/index.html">Supplemental Materials</a></li>
</ul>

            
          
        </div>
      </div>
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
        <a href="http://uwpce-pythoncert.github.io/IntroToPython/index.html">Introduction To Python</a>
      </nav>


      
      <div class="wy-nav-content">
        <div class="rst-content">
          





<div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="http://uwpce-pythoncert.github.io/IntroToPython/index.html">Docs</a> »</li>
      
    <li>Object Oriented Programming</li>
      <li class="wy-breadcrumbs-aside">
        
          
            <a href="http://uwpce-pythoncert.github.io/IntroToPython/_sources/session07.txt" rel="nofollow"> View page source</a>
          
        
      </li>
  </ul>
  <hr>
</div>
          <div role="main" class="document" itemscope="itemscope" itemtype="http://schema.org/Article">
           <div itemprop="articleBody">
            
  <div class="section" id="object-oriented-programming">
<h1>Object Oriented Programming<a class="headerlink" href="#object-oriented-programming" title="Permalink to this headline">¶</a></h1>
<div class="medium centered container">
<p>Classes</p>
<p>Instances</p>
<p>Class and instance attributes</p>
<p>Subclassing</p>
<p>Overriding methods</p>
</div>
<div class="section" id="review-questions">
<h2>Review/Questions<a class="headerlink" href="#review-questions" title="Permalink to this headline">¶</a></h2>
<div class="section" id="review-of-previous-class">
<h3>Review of Previous Class<a class="headerlink" href="#review-of-previous-class" title="Permalink to this headline">¶</a></h3>
<p class="medium advanced argument passing">Lambda</p>
<p class="medium advanced argument passing">Functions as Objects</p>
</div>
<div class="section" id="homework-review">
<h3>Homework review<a class="headerlink" href="#homework-review" title="Permalink to this headline">¶</a></h3>
<p>Homework Questions?</p>
<p>Did you all get a trapedzoidal rule function working?</p>
<p>Anyone get the “passing through of arguments”?</p>
<p>How about the adaptive solutions?</p>
</div>
<div class="section" id="notes-on-floating-point">
<h3>Notes on Floating point<a class="headerlink" href="#notes-on-floating-point" title="Permalink to this headline">¶</a></h3>
<p>Did anyone look at the isclose() function?</p>
<p>How to make a range of numbers in floating point?</p>
<p>Anyone do something like this?:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">s</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">a</span>
<span class="k">while</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="p">:</span>
    <span class="n">s</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">x</span> <span class="o">+=</span> <span class="n">delta_x</span>

<span class="o">--</span> <span class="n">see</span> <span class="n">my</span> <span class="n">solution</span><span class="o">.</span>
</pre></div>
</div>
<p>Some notes about FP issues:</p>
<p><a class="reference external" href="https://docs.python.org/3.5/tutorial/floatingpoint.html">https://docs.python.org/3.5/tutorial/floatingpoint.html</a></p>
</div>
<div class="section" id="code-review">
<h3>Code Review<a class="headerlink" href="#code-review" title="Permalink to this headline">¶</a></h3>
<p>Anyone unsatisfied with their solution – or stuck?</p>
<p>Let’s do a code review!</p>
</div>
<div class="section" id="lightning-talks-today">
<h3>Lightning Talks Today:<a class="headerlink" href="#lightning-talks-today" title="Permalink to this headline">¶</a></h3>
<p class="medium">Eric Vegors</p>
<p class="medium">Ian Cote</p>
<p class="medium">Masako Tebbetts</p>
</div>
</div>
<div class="section" id="id1">
<h2>Object Oriented Programming<a class="headerlink" href="#id1" title="Permalink to this headline">¶</a></h2>
<p>A Core approach to organizing code.</p>
<p>I’m going to go through this fast.</p>
<p>So we can get to the actual coding.</p>
<div class="section" id="id2">
<h3>Object Oriented Programming<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h3>
<p>More about Python implementation than OO design/strengths/weaknesses</p>
<p>One reason for this:</p>
<p>Folks can’t even agree on what OO “really” means</p>
<p>See: The Quarks of Object-Oriented Development</p>
<blockquote>
<div><ul class="simple">
<li>Deborah J. Armstrong</li>
</ul>
</div></blockquote>
<p><a class="reference external" href="http://agp.hx0.ru/oop/quarks.pdf">http://agp.hx0.ru/oop/quarks.pdf</a></p>
<p>Is Python a “True” Object-Oriented Language?</p>
<p>(Doesn’t support full encapsulation, doesn’t <em>require</em>
classes,  etc...)</p>
<p class="center large">I don’t Care!</p>
<p>Good software design is about code re-use, clean separation of concerns,
refactorability, testability, etc...</p>
<dl class="docutils">
<dt>OO can help with all that, but:</dt>
<dd><ul class="first last simple">
<li>It doesn’t guarantee it</li>
<li>It can get in the way</li>
</ul>
</dd>
</dl>
<p>Python is a Dynamic Language</p>
<p>That clashes with “pure” OO</p>
<dl class="docutils">
<dt>Think in terms of what makes sense for your project</dt>
<dd>– not any one paradigm of software design.</dd>
</dl>
<p>So what is “object oriented programming”?</p>
<div class="line-block">
<div class="line">“Objects can be thought of as wrapping their data
within a set of functions designed to ensure that
the data are used appropriately, and to assist in
that use”</div>
</div>
<div class="line-block">
<div class="line"><br></div>
</div>
<p><a class="reference external" href="http://en.wikipedia.org/wiki/Object-oriented_programming">http://en.wikipedia.org/wiki/Object-oriented_programming</a></p>
<p>Even simpler:</p>
<p>“Objects are data and the functions that act on them in one place.”</p>
<p>This is the core of “encapsulation”</p>
<p>In Python: just another namespace.</p>
<p>The OO buzzwords:</p>
<blockquote>
<div><ul class="simple">
<li>data abstraction</li>
<li>encapsulation</li>
<li>modularity</li>
<li>polymorphism</li>
<li>inheritance</li>
</ul>
</div></blockquote>
<p>Python does all of this, though it doesn’t enforce it.</p>
<p>You can do OO in C</p>
<p>(see the GTK+ project)</p>
<p>“OO languages” give you some handy tools to make it easier (and safer):</p>
<blockquote>
<div><ul class="simple">
<li>polymorphism (duck typing gives you this anyway)</li>
<li>inheritance</li>
</ul>
</div></blockquote>
<p>OO is the dominant model for the past couple decades</p>
<p>You will need to use it:</p>
<ul class="simple">
<li>It’s a good idea for a lot of problems</li>
<li>You’ll need to work with OO packages</li>
</ul>
<p>(Even a fair bit of the standard library is Object Oriented)</p>
<dl class="docutils">
<dt>class</dt>
<dd>A category of objects: particular data and behavior: A “circle” (same as a type in python)</dd>
<dt>instance</dt>
<dd>A particular object of a class: a specific circle</dd>
<dt>object</dt>
<dd>The general case of a instance – really any value (in Python anyway)</dd>
<dt>attribute</dt>
<dd>Something that belongs to an object (or class): generally thought of
as a variable, or single object, as opposed to a ...</dd>
<dt>method</dt>
<dd>A function that belongs to a class</dd>
</dl>
<p class="center">Note that in python, functions are first class objects, so a method <em>is</em> an attribute</p>
</div>
</div>
<div class="section" id="python-classes">
<h2>Python Classes<a class="headerlink" href="#python-classes" title="Permalink to this headline">¶</a></h2>
<p class="left">The <code class="docutils literal"><span class="pre">class</span></code>  statement</p>
<p class="left"><code class="docutils literal"><span class="pre">class</span></code>  creates a new type object:</p>
<div class="left highlight-ipython"><div class="highlight"><pre><span class="gp">In [4]: </span><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
<span class="go">    pass</span>
<span class="gp">   ...:</span>
<span class="gp">In [5]: </span><span class="nb">type</span><span class="p">(</span><span class="n">C</span><span class="p">)</span>
<span class="gh">Out[5]: </span><span class="go">type</span>
</pre></div>
</div>
<p class="left">A class is a type – interesting!</p>
<p class="left">It is created when the statement is run – much like <code class="docutils literal"><span class="pre">def</span></code></p>
<div class="section" id="id3">
<h3>Python Classes<a class="headerlink" href="#id3" title="Permalink to this headline">¶</a></h3>
<p>About the simplest class you can write</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
<span class="gp">... </span>    <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Point</span>
<span class="go">&lt;class __main__.Point at 0x2bf928&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Point</span><span class="o">.</span><span class="n">x</span>
<span class="go">1</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span> <span class="o">=</span> <span class="n">Point</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span>
<span class="go">&lt;__main__.Point instance at 0x2de918&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">p</span><span class="o">.</span><span class="n">x</span>
<span class="go">1</span>
</pre></div>
</div>
<p>Basic Structure of a real class:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
<span class="c"># everything defined in here is in the class namespace</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>

<span class="c">## create an instance of the class</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>

<span class="c">## access the attributes</span>
<span class="k">print</span><span class="p">(</span><span class="s">"p.x is:"</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">x</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"p.y is:"</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>
</pre></div>
</div>
<p>see: <code class="docutils literal"><span class="pre">Examples/Session07/simple_classes.py</span></code></p>
<p>The Initializer</p>
<p>The <code class="docutils literal"><span class="pre">__init__</span></code>  special method is called when a new instance of a class is created.</p>
<p>You can use it to do any set-up you need</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Point</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
</pre></div>
</div>
<p>It gets the arguments passed when you call the class object:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</pre></div>
</div>
<p>What is this <code class="docutils literal"><span class="pre">self</span></code> thing?</p>
<p>The instance of the class is passed as the first parameter for every method.</p>
<p>“<code class="docutils literal"><span class="pre">self</span></code>” is only a convention – but you DO want to use it.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">a_function</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
<span class="o">...</span>
</pre></div>
</div>
<p>Does this look familiar from C-style procedural programming?</p>
<p>Anything assigned to a <code class="docutils literal"><span class="pre">self.</span></code>  attribute is kept in the instance
name space – <code class="docutils literal"><span class="pre">self</span></code> <em>is</em> the instance.</p>
<p>That’s where all the instance-specific data is.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Point</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="n">color</span><span class="o">=</span> <span class="s">"red"</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
</pre></div>
</div>
<p>Anything assigned in the class scope is a class attribute – every
instance of the class shares the same one.</p>
<p>Note: the methods defined by <code class="docutils literal"><span class="pre">def</span></code> are class attributes as well.</p>
<p>The class is one namespace, the instance is another.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="n">color</span><span class="o">=</span> <span class="s">"red"</span>
<span class="o">...</span>
    <span class="k">def</span> <span class="nf">get_color</span><span class="p">():</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">color</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p3</span><span class="o">.</span><span class="n">get_color</span><span class="p">()</span>
 <span class="s">'red'</span>
</pre></div>
</div>
<p>class attributes are accessed with <code class="docutils literal"><span class="pre">self</span></code>  also.</p>
<p>Typical methods:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
    <span class="n">color</span> <span class="o">=</span> <span class="s">"red"</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">diameter</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">=</span> <span class="n">diameter</span>

    <span class="k">def</span> <span class="nf">grow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">factor</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">*</span> <span class="n">factor</span>
</pre></div>
</div>
<p>Methods take some parameters, manipulate the attributes in <code class="docutils literal"><span class="pre">self</span></code>.</p>
<p>They may or may not return something useful.</p>
<p>Gotcha!</p>
<div class="highlight-python"><div class="highlight"><pre><span class="o">...</span>
    <span class="k">def</span> <span class="nf">grow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">factor</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">*</span> <span class="n">factor</span>
<span class="o">...</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">205</span><span class="p">]:</span> <span class="n">C</span> <span class="o">=</span> <span class="n">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">In</span> <span class="p">[</span><span class="mi">206</span><span class="p">]:</span> <span class="n">C</span><span class="o">.</span><span class="n">grow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>

<span class="ne">TypeError</span><span class="p">:</span> <span class="n">grow</span><span class="p">()</span> <span class="n">takes</span> <span class="n">at</span> <span class="n">most</span> <span class="mi">2</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">3</span> <span class="n">given</span><span class="p">)</span>
</pre></div>
</div>
<p>Huh???? I only gave 2</p>
<p><code class="docutils literal"><span class="pre">self</span></code> is implicitly passed in for you by python.</p>
<p>(demo of bound vs. unbound methods)</p>
</div>
<div class="section" id="lab">
<h3>LAB<a class="headerlink" href="#lab" title="Permalink to this headline">¶</a></h3>
<p>Let’s say you need to render some html...</p>
<p>The goal is to build a set of classes that render an html
page.</p>
<p>We’ll start with a single class, then add some sub-classes
to specialize the behavior</p>
<p>Details in:</p>
<p><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/exercises/html_renderer.html#exercise-html-renderer"><span>HTML Renderer Exercise</span></a></p>
<p>Let’s get a start with step 1. in class.</p>
<p>I’ll give you a few minutes to think about it – then we’ll get started as a group.</p>
</div>
<div class="section" id="lightning-talks">
<h3>Lightning Talks<a class="headerlink" href="#lightning-talks" title="Permalink to this headline">¶</a></h3>
<div class="medium line-block">
<div class="line"><br></div>
<div class="line">Eric Vegors</div>
<div class="line"><br></div>
<div class="line">Ian Cote</div>
<div class="line"><br></div>
<div class="line">Masako Tebbetts</div>
</div>
</div>
</div>
<div class="section" id="subclassing-inheritance">
<h2>Subclassing/Inheritance<a class="headerlink" href="#subclassing-inheritance" title="Permalink to this headline">¶</a></h2>
<div class="section" id="inheritance">
<h3>Inheritance<a class="headerlink" href="#inheritance" title="Permalink to this headline">¶</a></h3>
<p>In object-oriented programming (OOP), inheritance is a way to reuse code
of existing objects, or to establish a subtype from an existing object.</p>
<p>Objects are defined by classes, classes can inherit attributes and behavior
from pre-existing classes called base classes or super classes.</p>
<p>The resulting classes are known as derived classes or subclasses.</p>
<p>(<a class="reference external" href="http://en.wikipedia.org/wiki/Inheritance_%28object-oriented_programming%29">http://en.wikipedia.org/wiki/Inheritance_%28object-oriented_programming%29</a>)</p>
</div>
<div class="section" id="subclassing">
<h3>Subclassing<a class="headerlink" href="#subclassing" title="Permalink to this headline">¶</a></h3>
<p>A subclass “inherits” all the attributes (methods, etc) of the parent class.</p>
<p>You can then change (“override”) some or all of the attributes to change the behavior.</p>
<p>You can also add new attributes to extend the behavior.</p>
<p>The simplest subclass in Python:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">A_subclass</span><span class="p">(</span><span class="n">The_superclass</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
</div>
<p><code class="docutils literal"><span class="pre">A_subclass</span></code>  now has exactly the same behavior as <code class="docutils literal"><span class="pre">The_superclass</span></code></p>
</div>
<div class="section" id="overriding-attributes">
<h3>Overriding attributes<a class="headerlink" href="#overriding-attributes" title="Permalink to this headline">¶</a></h3>
<p>Overriding is as simple as creating a new attribute with the same name:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
    <span class="n">color</span> <span class="o">=</span> <span class="s">"red"</span>

<span class="o">...</span>

<span class="k">class</span> <span class="nc">NewCircle</span><span class="p">(</span><span class="n">Circle</span><span class="p">):</span>
    <span class="n">color</span> <span class="o">=</span> <span class="s">"blue"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">nc</span> <span class="o">=</span> <span class="n">NewCircle</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">nc</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>
<span class="n">blue</span>
</pre></div>
</div>
<p>all the <code class="docutils literal"><span class="pre">self</span></code>  instances will have the new attribute.</p>
</div>
<div class="section" id="overriding-methods">
<h3>Overriding methods<a class="headerlink" href="#overriding-methods" title="Permalink to this headline">¶</a></h3>
<p>Same thing, but with methods (remember, a method <em>is</em> an attribute in python)</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
<span class="o">...</span>
    <span class="k">def</span> <span class="nf">grow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">factor</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
        <span class="sd">"""grows the circle's diameter by factor"""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">*</span> <span class="n">factor</span>
<span class="o">...</span>

<span class="k">class</span> <span class="nc">NewCircle</span><span class="p">(</span><span class="n">Circle</span><span class="p">):</span>
<span class="o">...</span>
    <span class="k">def</span> <span class="nf">grow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">factor</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
        <span class="sd">"""grows the area by factor..."""</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">*</span> <span class="n">math</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</pre></div>
</div>
<p>all the instances will have the new method</p>
<p>Here’s a program design suggestion:</p>
<p>“”“</p>
<p>Whenever you override a method, the interface of the new method 
should be the same as the old.  It should takethe same parameters, 
return the same type, and obey the same preconditions and 
postconditions.</p>
<p>If you obey this rule, you will find that any function designed to 
work with an instance of a superclass, like a Deck, will also work with 
instances of subclasses like a Hand or PokerHand.  If you violate this 
rule, your code will collapse like (sorry) a house of cards.</p>
<p>“”“</p>
<div class="line-block">
<div class="line"><br></div>
<div class="line">[ThinkPython 18.10]</div>
<div class="line"><br></div>
<div class="line">( Demo of class vs. instance attributes )</div>
</div>
</div>
</div>
<div class="section" id="more-on-subclassing">
<h2>More on Subclassing<a class="headerlink" href="#more-on-subclassing" title="Permalink to this headline">¶</a></h2>
<div class="section" id="overriding-init">
<h3>Overriding __init__<a class="headerlink" href="#overriding-init" title="Permalink to this headline">¶</a></h3>
<p><code class="docutils literal"><span class="pre">__init__</span></code> common method to override</p>
<p>You often need to call the super class <code class="docutils literal"><span class="pre">__init__</span></code>  as well</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
    <span class="n">color</span> <span class="o">=</span> <span class="s">"red"</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">diameter</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">diameter</span> <span class="o">=</span> <span class="n">diameter</span>
<span class="o">...</span>
<span class="k">class</span> <span class="nc">CircleR</span><span class="p">(</span><span class="n">Circle</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
        <span class="n">diameter</span> <span class="o">=</span> <span class="n">radius</span><span class="o">*</span><span class="mi">2</span>
        <span class="n">Circle</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">diameter</span><span class="p">)</span>
</pre></div>
</div>
<p>exception to: “don’t change the method signature” rule.</p>
</div>
<div class="section" id="more-subclassing">
<h3>More subclassing<a class="headerlink" href="#more-subclassing" title="Permalink to this headline">¶</a></h3>
<p>You can also call the superclass’ other methods:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
<span class="o">...</span>
    <span class="k">def</span> <span class="nf">get_area</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">diameter</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="p">(</span><span class="n">diameter</span><span class="o">/</span><span class="mf">2.0</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>


<span class="k">class</span> <span class="nc">CircleR2</span><span class="p">(</span><span class="n">Circle</span><span class="p">):</span>
<span class="o">...</span>
    <span class="k">def</span> <span class="nf">get_area</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Circle</span><span class="o">.</span><span class="n">get_area</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">radius</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
</pre></div>
</div>
<p>There is nothing special about <code class="docutils literal"><span class="pre">__init__</span></code>  except that it gets called
automatically when you instantiate an instance.</p>
</div>
<div class="section" id="when-to-subclass">
<h3>When to Subclass<a class="headerlink" href="#when-to-subclass" title="Permalink to this headline">¶</a></h3>
<p>“Is a” relationship: Subclass/inheritance</p>
<p>“Has a” relationship: Composition</p>
<p>“Is a” vs “Has a”</p>
<p>You may have a class that needs to accumulate an arbitrary number of objects.</p>
<p>A list can do that – so should you subclass list?</p>
<p>Ask yourself:</p>
<p>– <strong>Is</strong> your class a list (with some extra functionality)?</p>
<p>or</p>
<p>– Does you class <strong>have</strong> a list?</p>
<p>You only want to subclass list if your class could be used anywhere a list can be used.</p>
</div>
<div class="section" id="attribute-resolution-order">
<h3>Attribute resolution order<a class="headerlink" href="#attribute-resolution-order" title="Permalink to this headline">¶</a></h3>
<p>When you access an attribute:</p>
<p><code class="docutils literal"><span class="pre">an_instance.something</span></code></p>
<p>Python looks for it in this order:</p>
<blockquote>
<div><ul class="simple">
<li>Is it an instance attribute ?</li>
<li>Is it a class attribute ?</li>
<li>Is it a superclass attribute ?</li>
<li>Is it a super-superclass attribute ?</li>
<li>...</li>
</ul>
</div></blockquote>
<p>It can get more complicated...</p>
<p><a class="reference external" href="https://www.python.org/download/releases/2.3/mro/">https://www.python.org/download/releases/2.3/mro/</a></p>
<p><a class="reference external" href="http://python-history.blogspot.com/2010/06/method-resolution-order.html">http://python-history.blogspot.com/2010/06/method-resolution-order.html</a></p>
</div>
<div class="section" id="what-are-python-classes-really">
<h3>What are Python classes, really?<a class="headerlink" href="#what-are-python-classes-really" title="Permalink to this headline">¶</a></h3>
<p>Putting aside the OO theory...</p>
<p>Python classes are:</p>
<blockquote>
<div><ul class="simple">
<li>Namespaces<ul>
<li>One for the class object</li>
<li>One for each instance</li>
</ul>
</li>
<li>Attribute resolution order</li>
<li>Auto tacking-on of <code class="docutils literal"><span class="pre">self</span></code> when methods are called</li>
</ul>
</div></blockquote>
<p>That’s about it – really!</p>
</div>
<div class="section" id="type-based-dispatch">
<h3>Type-Based dispatch<a class="headerlink" href="#type-based-dispatch" title="Permalink to this headline">¶</a></h3>
<p>You’ll see code that looks like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">A_Class</span><span class="p">):</span>
    <span class="n">Do_something_with_other</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">Do_something_else</span>
</pre></div>
</div>
<p>Usually better to use “duck typing” (polymorphism)</p>
<p>But when it’s called for:</p>
<blockquote>
<div><ul class="simple">
<li><code class="docutils literal"><span class="pre">isinstance()</span></code></li>
<li><code class="docutils literal"><span class="pre">issubclass()</span></code></li>
</ul>
</div></blockquote>
<p>GvR: “Five Minute Multi- methods in Python”:</p>
<p><a class="reference external" href="http://www.artima.com/weblogs/viewpost.jsp?thread=101605">http://www.artima.com/weblogs/viewpost.jsp?thread=101605</a></p>
<p><a class="reference external" href="https://www.python.org/download/releases/2.3/mro/">https://www.python.org/download/releases/2.3/mro/</a></p>
<p><a class="reference external" href="http://python-history.blogspot.com/2010/06/method-resolution-order.html">http://python-history.blogspot.com/2010/06/method-resolution-order.html</a></p>
</div>
<div class="section" id="wrap-up">
<h3>Wrap Up<a class="headerlink" href="#wrap-up" title="Permalink to this headline">¶</a></h3>
<p>Thinking OO in Python:</p>
<p>Think about what makes sense for your code:</p>
<ul class="simple">
<li>Code re-use</li>
<li>Clean APIs</li>
<li>...</li>
</ul>
<p>Don’t be a slave to what OO is <em>supposed</em> to look like.</p>
<p>Let OO work for you, not <em>create</em> work for you</p>
<p>OO in Python:</p>
<p>The Art of Subclassing: <em>Raymond Hettinger</em></p>
<p><a class="reference external" href="http://pyvideo.org/video/879/the-art-of-subclassing">http://pyvideo.org/video/879/the-art-of-subclassing</a></p>
<p>“classes are for code re-use – not creating taxonomies”</p>
<p>Stop Writing Classes: <em>Jack Diederich</em></p>
<p><a class="reference external" href="http://pyvideo.org/video/880/stop-writing-classes">http://pyvideo.org/video/880/stop-writing-classes</a></p>
<p>“If your class has only two methods – and one of them is <code class="docutils literal"><span class="pre">__init__</span></code>
– you don’t need a class”</p>
</div>
</div>
<div class="section" id="id4">
<h2>LAB<a class="headerlink" href="#id4" title="Permalink to this headline">¶</a></h2>
<ul class="left medium simple">
<li>html renderer: let’s see how much more we can do!</li>
</ul>
<p><a class="reference internal" href="http://uwpce-pythoncert.github.io/IntroToPython/exercises/html_renderer.html#exercise-html-renderer"><span>HTML Renderer Exercise</span></a></p>
<p>Now we have a base class, and we can:</p>
<ul class="simple">
<li>Subclass overriding class attributes</li>
<li>Subclass overriding a method</li>
<li>Subclass overriding the <code class="docutils literal"><span class="pre">__init__</span></code></li>
</ul>
<p>These are the core OO approaches</p>
</div>
<div class="section" id="id5">
<h2>More on Subclassing<a class="headerlink" href="#id5" title="Permalink to this headline">¶</a></h2>
<p class="left">This is a great talk (yes, I’m repeating):</p>
<p class="left">The Art of Subclassing: <em>Raymond Hettinger</em></p>
<p class="left"><a class="reference external" href="http://pyvideo.org/video/879/the-art-of-subclassing">http://pyvideo.org/video/879/the-art-of-subclassing</a></p>
<p class="left">If you haven’t watched it,  It’s well worth your time</p>
<div class="section" id="what-s-a-subclass-for">
<h3>What’s a Subclass For?<a class="headerlink" href="#what-s-a-subclass-for" title="Permalink to this headline">¶</a></h3>
<p>The most salient points from that video are as follows:</p>
<ul class="simple">
<li><strong>Subclassing is not for Specialization</strong></li>
<li><strong>Subclassing is for Reusing Code</strong></li>
<li><strong>Bear in mind that the subclass is in charge</strong></li>
</ul>
</div>
<div class="section" id="multiple-inheritance">
<h3>Multiple Inheritance<a class="headerlink" href="#multiple-inheritance" title="Permalink to this headline">¶</a></h3>
<p>Multiple inheritance: Inheriting from more than one class</p>
<p>Simply provide more than one parent.</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Combined</span><span class="p">(</span><span class="n">Super1</span><span class="p">,</span> <span class="n">Super2</span><span class="p">,</span> <span class="n">Super3</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">something</span><span class="p">,</span> <span class="n">something</span> <span class="k">else</span><span class="p">):</span>
        <span class="c"># some custom initialization here.</span>
        <span class="n">Super1</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">......</span><span class="p">)</span>
        <span class="n">Super2</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">......</span><span class="p">)</span>
        <span class="n">Super3</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">......</span><span class="p">)</span>
        <span class="c"># possibly more custom initialization</span>
</pre></div>
</div>
<p>(calls to the super class <code class="docutils literal"><span class="pre">__init__</span></code>  are optional – case dependent)</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Combined</span><span class="p">(</span><span class="n">Super1</span><span class="p">,</span> <span class="n">Super2</span><span class="p">,</span> <span class="n">Super3</span><span class="p">)</span>
</pre></div>
</div>
<p>Attributes are located bottom-to-top, left-to-right</p>
<ul class="simple">
<li>Is it an instance attribute ?</li>
<li>Is it a class attribute ?</li>
<li>Is it a superclass attribute ?<ul>
<li>Is  it an attribute of the left-most superclass?</li>
<li>Is  it an attribute of the next superclass?</li>
<li>and so on up the hierarchy...</li>
</ul>
</li>
<li>Is it a super-superclass attribute ?</li>
<li>... also left to right ...</li>
</ul>
<p><a class="reference external" href="http://python-history.blogspot.com/2010/06/method-resolution-order.html">http://python-history.blogspot.com/2010/06/method-resolution-order.html</a></p>
<p>So why would you want to do this? One reason:  <em>mixins</em></p>
<p>Provides an subset of expected functionality in a re-usable package.</p>
<p>Huh? this is why –</p>
<p>Hierarchies are not always simple:</p>
<ul class="simple">
<li>Animal<ul>
<li>Mammal<ul>
<li>GiveBirth()</li>
</ul>
</li>
<li>Bird<ul>
<li>LayEggs()</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Where do you put a Platypus?</p>
<p>Real World Example: <a class="reference external" href="https://github.com/svn2github/wxPython/blob/master/3rdParty/FloatCanvas/floatcanvas/FloatCanvas.py#L485">FloatCanvas</a></p>
</div>
<div class="section" id="super">
<h3><code class="docutils literal"><span class="pre">super()</span></code><a class="headerlink" href="#super" title="Permalink to this headline">¶</a></h3>
<p><code class="docutils literal"><span class="pre">super()</span></code>: use it to call a superclass method, rather than explicitly calling
the unbound method on the superclass.</p>
<p>instead of:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="n">B</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">argw</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="o">...</span>
</pre></div>
</div>
<p>You can do:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">argw</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="o">...</span>
</pre></div>
</div>
<p>Caution: There are some subtle differences with multiple inheritance.</p>
<p>You can use explicit calling to ensure that the ‘right’ method is called.</p>
<p class="medium"><strong>Background</strong></p>
<p>Two seminal articles about <code class="docutils literal"><span class="pre">super()</span></code>:</p>
<p>“Super Considered Harmful” – James Knight</p>
<p><a class="reference external" href="https://fuhm.net/super-harmful/">https://fuhm.net/super-harmful/</a></p>
<p>“super() considered super!”  –  Raymond Hettinger</p>
<p><a class="reference external" href="http://rhettinger.wordpress.com/2011/05/26/super-considered-super/">http://rhettinger.wordpress.com/2011/05/26/super-considered-super/</a></p>
<p>(Both worth reading....)</p>
</div>
</div>
<div class="section" id="homework">
<h2>Homework<a class="headerlink" href="#homework" title="Permalink to this headline">¶</a></h2>
<p>Complete your html renderer.</p>
<p>Watch those videos:</p>
<p>Python class toolkit: <em>Raymond Hettinger</em> – <a class="reference external" href="https://youtu.be/HTLu2DFOdTg">https://youtu.be/HTLu2DFOdTg</a></p>
<p><a class="reference external" href="https://speakerdeck.com/pyconslides/pythons-class-development-toolkit-by-raymond-hettinger">https://speakerdeck.com/pyconslides/pythons-class-development-toolkit-by-raymond-hettinger</a></p>
<p>The Art of Subclassing: <em>Raymond Hettinger</em> – <a class="reference external" href="http://pyvideo.org/video/879/the-art-of-subclassing">http://pyvideo.org/video/879/the-art-of-subclassing</a></p>
<p>Stop Writing Classes: <em>Jack Diederich</em> – <a class="reference external" href="http://pyvideo.org/video/880/stop-writing-classes">http://pyvideo.org/video/880/stop-writing-classes</a></p>
<p>Read up on super()</p>
</div>
</div>


           </div>
          </div>
          <footer>
  
    <div class="rst-footer-buttons" role="navigation" aria-label="footer navigation">
      
        <a href="http://uwpce-pythoncert.github.io/IntroToPython/session08.html" class="btn btn-neutral float-right" title="Session Eight: More OO: Properties, Special methods." accesskey="n">Next <span class="fa fa-arrow-circle-right"></span></a>
      
      
        <a href="http://uwpce-pythoncert.github.io/IntroToPython/session06.html" class="btn btn-neutral" title="Session Six: Advanced Argument Passing, lambda, functions as objects" accesskey="p"><span class="fa fa-arrow-circle-left"></span> Previous</a>
      
    </div>
  

  <hr>

  <div role="contentinfo">
    <p>
        © Copyright 2014, Christopher Barker, Cris Ewing, .

    </p>
  </div>
  Built with <a href="http://sphinx-doc.org/">Sphinx</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org/">Read the Docs</a>. 

</footer>

        </div>
      </div>

    </section>

  </div>
  


  

    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'./',
            VERSION:'1.3',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true
        };
    </script>
      <script type="text/javascript" src="Object%20Oriented%20Programming%20%E2%80%94%20Introduction%20To%20Python%201.3%20documentation_files/jquery.js"></script>
      <script type="text/javascript" src="Object%20Oriented%20Programming%20%E2%80%94%20Introduction%20To%20Python%201.3%20documentation_files/underscore.js"></script>
      <script type="text/javascript" src="Object%20Oriented%20Programming%20%E2%80%94%20Introduction%20To%20Python%201.3%20documentation_files/doctools.js"></script>
      <script type="text/javascript" src="Object%20Oriented%20Programming%20%E2%80%94%20Introduction%20To%20Python%201.3%20documentation_files/MathJax.js"></script>

  

  
  
    <script type="text/javascript" src="Object%20Oriented%20Programming%20%E2%80%94%20Introduction%20To%20Python%201.3%20documentation_files/theme.js"></script>
  

  
  
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>
   


</body></html>